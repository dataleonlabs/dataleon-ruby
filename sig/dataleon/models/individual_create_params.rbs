module Dataleon
  module Models
    type individual_create_params =
      {
        workspace_id: String,
        person: Dataleon::IndividualCreateParams::Person,
        source_id: String,
        technical_data: Dataleon::IndividualCreateParams::TechnicalData
      }
      & Dataleon::Internal::Type::request_parameters

    class IndividualCreateParams < Dataleon::Internal::Type::BaseModel
      extend Dataleon::Internal::Type::RequestParameters::Converter
      include Dataleon::Internal::Type::RequestParameters

      attr_accessor workspace_id: String

      attr_reader person: Dataleon::IndividualCreateParams::Person?

      def person=: (
        Dataleon::IndividualCreateParams::Person
      ) -> Dataleon::IndividualCreateParams::Person

      attr_reader source_id: String?

      def source_id=: (String) -> String

      attr_reader technical_data: Dataleon::IndividualCreateParams::TechnicalData?

      def technical_data=: (
        Dataleon::IndividualCreateParams::TechnicalData
      ) -> Dataleon::IndividualCreateParams::TechnicalData

      def initialize: (
        workspace_id: String,
        ?person: Dataleon::IndividualCreateParams::Person,
        ?source_id: String,
        ?technical_data: Dataleon::IndividualCreateParams::TechnicalData,
        ?request_options: Dataleon::request_opts
      ) -> void

      def to_hash: -> {
        workspace_id: String,
        person: Dataleon::IndividualCreateParams::Person,
        source_id: String,
        technical_data: Dataleon::IndividualCreateParams::TechnicalData,
        request_options: Dataleon::RequestOptions
      }

      type person =
        {
          birthday: String,
          email: String,
          first_name: String,
          gender: Dataleon::Models::IndividualCreateParams::Person::gender,
          last_name: String,
          maiden_name: String,
          nationality: String,
          phone_number: String
        }

      class Person < Dataleon::Internal::Type::BaseModel
        attr_reader birthday: String?

        def birthday=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader first_name: String?

        def first_name=: (String) -> String

        attr_reader gender: Dataleon::Models::IndividualCreateParams::Person::gender?

        def gender=: (
          Dataleon::Models::IndividualCreateParams::Person::gender
        ) -> Dataleon::Models::IndividualCreateParams::Person::gender

        attr_reader last_name: String?

        def last_name=: (String) -> String

        attr_reader maiden_name: String?

        def maiden_name=: (String) -> String

        attr_reader nationality: String?

        def nationality=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          ?birthday: String,
          ?email: String,
          ?first_name: String,
          ?gender: Dataleon::Models::IndividualCreateParams::Person::gender,
          ?last_name: String,
          ?maiden_name: String,
          ?nationality: String,
          ?phone_number: String
        ) -> void

        def to_hash: -> {
          birthday: String,
          email: String,
          first_name: String,
          gender: Dataleon::Models::IndividualCreateParams::Person::gender,
          last_name: String,
          maiden_name: String,
          nationality: String,
          phone_number: String
        }

        type gender = :M | :F

        module Gender
          extend Dataleon::Internal::Type::Enum

          M: :M
          F: :F

          def self?.values: -> ::Array[Dataleon::Models::IndividualCreateParams::Person::gender]
        end
      end

      type technical_data =
        {
          active_aml_suspicions: bool,
          callback_url: String,
          callback_url_notification: String,
          filtering_score_aml_suspicions: Float,
          language: String,
          raw_data: bool
        }

      class TechnicalData < Dataleon::Internal::Type::BaseModel
        attr_reader active_aml_suspicions: bool?

        def active_aml_suspicions=: (bool) -> bool

        attr_reader callback_url: String?

        def callback_url=: (String) -> String

        attr_reader callback_url_notification: String?

        def callback_url_notification=: (String) -> String

        attr_reader filtering_score_aml_suspicions: Float?

        def filtering_score_aml_suspicions=: (Float) -> Float

        attr_reader language: String?

        def language=: (String) -> String

        attr_reader raw_data: bool?

        def raw_data=: (bool) -> bool

        def initialize: (
          ?active_aml_suspicions: bool,
          ?callback_url: String,
          ?callback_url_notification: String,
          ?filtering_score_aml_suspicions: Float,
          ?language: String,
          ?raw_data: bool
        ) -> void

        def to_hash: -> {
          active_aml_suspicions: bool,
          callback_url: String,
          callback_url_notification: String,
          filtering_score_aml_suspicions: Float,
          language: String,
          raw_data: bool
        }
      end
    end
  end
end
